package l3:fn-build;

interface parse-spec {
    record fn-parse-spec {
        // relative source path from project-dir
        entrypoint: string,
        // absolute directory path to project root
        project-dir: string,
        runtime: runtime,
    }

    // todo variant and binding for runtime::node::node_config::NodeConfig
    enum runtime {
        node,
        python,
    }

//    record node-config {
//        // Configured dependencies from package.json, excluding devDependencies
//        dependencies: list<string>,
//        // Whether package.json declares the package type as ES module
//        module-type: bool,
//        subpath-imports: 
//    }
}

interface parse-result {
    record fn-parse-manifest {
        // package dependency requirements for 
        dependencies: fn-dependencies,
        // the entrypoint source file containing the function's handler function
        entrypoint: fn-entrypoint,
        // source files included in a function manifest and build
        sources: list<fn-source>,
    }

    // metadata of function entrypoint
    record fn-entrypoint {
        // exported handler functions
        handlers: list<string>,
        // relative path to entrypoint source file from project-dir
        path: string,
    }

    // todo explicitly announce package dependencies in manifest
    // todo achieve with variant fn-dependencies::packages(list<string>)
    enum fn-dependencies {
        // function build will require project's production dependencies
        required,
        // function build does not require dependencies
        unused,
    }

    // a project source file
    record fn-source {
        // resolved and unresolved imports from a source file
        imports: list<module-import>,
        // relative source path from project-dir
        path: string,
    }

    variant module-import {
        // import of a package's production dependency
        package-dependency(dependency-import),
        // path to a project source relative to project-dir
        relative-source(string),
        // an unresolved import and error condition for function builds
        unknown(string),
    }

    record dependency-import {
        %package: string,
        subpath: option<string>,
    }
}

// todo typed parse error variant
world fn-parsing {
    use parse-spec.{fn-parse-spec, runtime};
    use parse-result.{fn-parse-manifest, fn-dependencies, fn-entrypoint, fn-source, module-import, dependency-import};

    export parse-entrypoint: func(spec: fn-parse-spec) -> result<fn-entrypoint, string>;

    export parse-fn: func(spec: fn-parse-spec) -> result<fn-parse-manifest, string>;
}
