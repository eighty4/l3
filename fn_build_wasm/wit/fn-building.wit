package l3:fn-build;

interface build-spec {
    use parse-spec.{runtime};

    record fn-build-spec {
        entrypoint: string,
        handler-fn-name: string,
        mode: build-mode,
        output: fn-output-config,
        project-dir: string,
        runtime: runtime,
    }

    enum build-mode {
        debug,
        release,
    }

    record fn-output-config {
        build-root: string,
        create-archive: bool,
        dirname: string,
        use-build-mode: bool,
    }
}

interface build-result {
    use parse-result.{fn-dependencies, fn-source, module-import, dependency-import};

    record fn-build-manifest {
        checksums: list<source-checksum>,
        dependencies: fn-dependencies,
        entrypoint: string,
        output: fn-build-output,
        sources: list<fn-source>,
    }

    record source-checksum {
        checksum: string,
        path: string,
    }

    record fn-build-output {
        archive-file: option<string>,
        build-dir: string,
        paths: list<tuple<string, string>>,
    }
}

// todo typed build error variant
world fn-building {
    use build-spec.{fn-build-spec};
    use build-result.{fn-build-manifest};

    export build-fn: func(spec: fn-build-spec) -> result<fn-build-manifest, string>;
}
